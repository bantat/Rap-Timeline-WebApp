
"""Test module for the DataSource class and methods. IMPORTANT: Test module does not function unless DataSource.py is
modified to include a hardcoded PASSWORD variable in the constructor.
"""

__author__ = 'Tore Banta, Charlie Sarano'

import unittest
from unittest import TestCase
import DataSource


class TestDataSource(TestCase):

    def test_getArtist(self):
        """Tests the method getArtist() of the DataSource class. Test fails if image link for Wikipedia article does not
        match string returned by method."""

        data = DataSource.DataSource()
        artist = data.getArtist("Kanye West")
        image = artist.getArtistImage()
        TestCase.assertEqual(self, image,'http://upload.wikimedia.org/wikipedia/commons/c/cd/'
                                         'Kanye_West_Lollapalooza_Chile_2011_2.jpg',"Image path string does not match "
                                                                                    "string returned by getArtistImage")

    def test_getAlbum(self):
        """Tests the method getAlbum() of the DataSource class. Test fails if image link for Wikipedia article does not
        match string returned by method."""
        data = DataSource.DataSource()
        album = data.getAlbum("Yeezus")
        image = album.getAlbumImage()
        TestCase.assertEqual(self, image,'http://upload.wikimedia.org/wikipedia/en/8/83/Yeezus_Kanye_West.jpg',
                             "Image path string does not match string returned by getArtistImage")

    def test_DatabaseConnections(self):
        """Tests the inter table connections within the database, to catch errors in albums.txt and artists.txt. Test
        fails if artist object cannot be constructed from the artist column in the database table albums."""
        data = DataSource.DataSource()
        albums = data.getAllAlbumsFromDatabase()
        for album in albums:
            album_name = album.getAlbumName()
            artist_name = album.getAlbumArtist()
            try:
                data.getArtist(artist_name)
            except:
                error_message = "Database inter-table connection failed, " \
                                "check artist: %s for album: %s" % (artist_name, album_name)
                self.fail(error_message)

    def test_VerifyDatabaseAlbums(self):
        """Tests for errors in database entries generated by scraper.py. Test fails if entry in albums table is missing
        description or image link. The test will also fail if description contains } or { characters, which indicate
        scraper.py improperly retrieved data."""
        data = DataSource.DataSource()
        albums = data.getAllAlbumsFromDatabase()
        for album in albums:
            error_description = "Missing album description for %s" % (album.getAlbumName())
            error_description2 = "Invalid album description for %s" % (album.getAlbumName())
            error_image = "Missing album image for %s" % (album.getAlbumName())
            TestCase.assertTrue(self, len(album.getAlbumDescription()) > 0, error_description)
            TestCase.assertTrue(self, len(album.getAlbumImage()) > 0, error_image)
            TestCase.assertFalse(self, '}' in album.getAlbumDescription(), error_description2)
            TestCase.assertFalse(self, '{' in album.getAlbumDescription(), error_description2)

    def test_VerifyDatabaseArtists(self):
        """Tests for errors in database entries generated by scraper.py. Test fails if entry in artists table is missing
        description or image link. The test will also fail if description contains } or { characters, which indicate
        scraper.py improperly retrieved data."""
        data = DataSource.DataSource()
        artists = data.getAllArtistsFromDatabase()
        for artist in artists:
            error_description = "Missing artist description for %s" % (artist.getArtistName())
            error_description2 = "Invalid artist description for %s" % (artist.getArtistName())
            error_image = "Missing artist image for %s" % (artist.getArtistName())
            TestCase.assertTrue(self, len(artist.getArtistDescription()) > 0, error_description)
            TestCase.assertTrue(self, len(artist.getArtistImage()) > 0, error_image)
            TestCase.assertFalse(self, '}' in artist.getArtistDescription(), error_description2)
            TestCase.assertFalse(self, '{' in artist.getArtistDescription(), error_description2)

if __name__ == '__main__':
    unittest.main()