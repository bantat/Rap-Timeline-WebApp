#!/usr/bin/python
#-*- coding: utf-8 -*-

"""A web application which requests user input in the form of a selection from a drop-down
menu, and returns a generic response regarding the input. This program utilizes a
basic script to present the form, and uses input sanitization to prevent injection.

By Tore Banta and Charlie Sarano, 2015
"""

import cgi

def main():
    parameter = getCgiParameter()
    displayHomePage(parameter['year'],'homepage.html')
    
def displayHomePage(year, homepage_filename):
	"""Prints out an HTML text representation of the main page of the web app, based on an
	input template file and user input. The content type is defined on the first line of
	print output as HTML text to indicate the page content is to be served as a web page.
	"""
	
	# Trys to open home page template file, and if successful, reads file content into
	# vars 'homepage'
	try:
		f = open(homepage_filename)
		homepage = f.read()
		f.close()
	except Exception, e:
		homepage = "Cannot read template file <tt>%s</tt>." % (homepage_filename)
    
    # Define dictionary to contain page content generated by python script to be
    # used in template, and string variables for each different section of content
	page_content = {}
	year_report = ""
	wiki_link = ""
	year_options = ""
	
	# List of years with available information on the timeline
	year_list = [2015,2014,2013,2012,2011,2010,2009,2008,2007,2006,2005,2004,2003,2002, \
	2001,2000,1999,1998,1997,1996,1995,1994,1993,1992,1991,1990,1989,1988]
	
	# Basic feature implemented is user input to select a year to view on timeline, if
	# statement generates results for user input when CGI parameter exists
	if year:
		# Script generated content to be replaced with release information upon
		# implementation, for now just makes some statements about user input and provides
		# link to Wikipedia page for the year they selected
		int_year = int(year)
		difference = 2015 - int_year
		string_difference = str(difference)
		year_report = "<p>The year you chose was %s.</p>\n" % (year)
		year_report += "<p>That was %s years ago.</p>\n" % (string_difference)
		wiki_link = '<p>Interested in learning more about the year %s?\n' % (year)
		wiki_link += 'Here is a link to the wikipedia page for %s:\n' % (year)
		wiki_link += '<a href="http://en.wikipedia.org/wiki/%s"> Wikipedia </a></p>\n' \
		% (year)
		
	# For loop iterates through list of years on timeline and generates options for
	# HTML 'select' tag in homepage template
	for item in year_list:
		year_value = item
		year_options += '<option value="%i">%i</option>\n' % (year_value, year_value)
	
	# Indents script generated page content appropriate amount
	year_options = indent(year_options, 6)	
	wiki_link = indent(wiki_link, 1)
	year_report = indent(year_report, 1)
	
	# Assigns script generated page content to key in dictionary 'page_content'
	page_content["options"] = year_options
	page_content["results"] = year_report
	page_content["links"] = wiki_link
	
	# Replaces page content placeholders in template file with corresponding dictionary
	# values in 'page_content' using format method of string
	output_html = homepage.format(**page_content)
	print "Content-type: text/html\r\n\r\n",
	print output_html
	
def getCgiParameter():
	"""Sanitizes and returns a dictionary of CGI parameters needed for page content
	generation.
	"""
	data = cgi.FieldStorage()
	parameter = {'year' : ''}
	if 'year' in data:
		parameter['year'] = sanitizeUserInput(data['year'].value)
	return parameter

def sanitizeUserInput(input):
    """Removes characters from user input string which might be used to perform SQL 
    injection.
    """
    illegal_chars = ";,\\/:'\"<>@"
    for ch in illegal_chars:
        input = input.replace(ch, '')
    return input

def indent(s, k):
	"""Indents string argument k number of tab characters (four spaces) for the purposes
	of HTML page formatting.
	"""
	return "\n".join([" "*(4*k) + line for line in s.splitlines()])

if __name__ == '__main__':
    main()